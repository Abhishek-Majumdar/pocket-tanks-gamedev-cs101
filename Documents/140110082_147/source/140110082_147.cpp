#include<simplecpp>
#include<ctime>

const double gravity = 0.1 ;
const double pi = 3.14159265;
const int shank=20;                                                                    // length of the shank of the tanks
int point1=0,point2=0;                                                                 // Points of players
int tank1x = 90, tank2x =690 , tank1y =0 , tank2y =0 ;                                 //Coordinates of center of tanks
int check;                                                                             // Notify an explosion
int yA[20]={40,80,160,130,190,80,45,150,200,100,140,60,90,100,30,0,110,180,75,50},     //5 terrains generated by brute force
    yB[20]={140,80,160,130,90,55,45,150,200,100,140,160,90,100,30,10,0,100,75,50},
    yC[20]={40,80,160,13,190,130,30,15,200,300,140,60,90,100,130,0,40,110,75,50},
    yD[20]={30,180,160,130,190,50,120,150,200,00,140,60,90,100,30,100,30,80,60,50},
    yE[20]={70,0,160,130,19,85,45,150,20,100,140,60,90,100,30,10,70,180,0,150},
    yfinal[20];



int m_menu();

int instructions()
{
    Rectangle background(400,300,800,600);    //clearing the screen
    background.setColor(WHITE);
    background.setFill();

    settextstyle( 5, HORIZ_DIR, 3);           // format of text
    /*{
   DEFAULT_FONT,
   TRIPLEX_FONT,
   SMALL_FONT,
   SANS_SERIF_FONT,
   GOTHIC_FONT,
   SCRIPT_FONT,
   SIMPLEX_FONT,
   TRIPLEX_SCR_FONT,
   COMPLEX_FONT,
   EUROPEAN_FONT,
   BOLD_FONT
     }*/
    Text instructions(400,200,"Instructions");
    Text line1(400,240,"# Both the players have to fire upon each other.");
    Text line2(400,280,"# Points are awarded on the basis of accuracy of hit .");
    Text line3(400,320,"# The first person to reach a hundred points is the winner .");
    Text line4(400,360,"# Set the power and angle and click on fire.");
    Text line5(400,400,"# There is a random wind , a surprise element ;) ");

    Text backbutton(40,30,"BACK");           //go back to main menu
    Rectangle r(20,10,20,20);                //backbutton
    r.setColor(RED);
    r.setFill();

    int temp=getClick();
    int x = temp/65536;
    int y = temp%65536;

    if(x>10&&x<30&&y>0&&y<20)
     return 1;

}

int m_menu()
{
  Rectangle background(400,300,800,600);                // clear screen
  background.setColor(WHITE);
  background.setFill();

  setfillstyle(7, RED);

     /*{
   EMPTY_FILL,
   SOLID_FILL,
   LINE_FILL,
   LTSLASH_FILL,
   SLASH_FILL,
   BKSLASH_FILL,
   LTBKSLASH_FILL,
   HATCH_FILL,
   XHATCH_FILL,
   INTERLEAVE_FILL,
   WIDE_DOT_FILL,
   CLOSE_DOT_FILL,
   USER_FILL
     }*/
 floodfill(400,300,RED);


    settextstyle( 8, HORIZ_DIR, 4);           // format of text

        /*{
   DEFAULT_FONT,
   TRIPLEX_FONT,
   SMALL_FONT,
   SANS_SERIF_FONT,
   GOTHIC_FONT,
   SCRIPT_FONT,
   SIMPLEX_FONT,
   TRIPLEX_SCR_FONT,
   COMPLEX_FONT,
   EUROPEAN_FONT,
   BOLD_FONT
}*/


    //floodfill(100,100,BLACK);

     Text t1(150,300,"New Game");
     t1.setColor(COLOR(255,0,0));
     Rectangle R1(150,310,170,40);

     Text t2(150,400,"Instructions");
     t2.setColor(COLOR(255,0,0));
     Rectangle R2(150,410,260,40 );                // BUTTONS ON MAIN MENU

     Text t3(150,500,"Exit");
     t3.setColor(COLOR(255,0,0));
     Rectangle R3(150,510,80,40);

     Text t4(400,100,"POCKET TANKS");
     t4.setColor(BLUE);

TRY:     int temp = getClick();

     int x = temp / 65536 ;
     int y = temp % 65536 ;

     if (x>65&&x<235&&y>290&&y<330)
            return 1;

     else if (x>20&&x<280&&y>390&&y<430)
            return 2;

     else if (x>110&&x<190&&y>490&&y<530)
            closeCanvas();

            else goto TRY;                            // To counter invalid clicks

wait(100);
}






void explosion(int x , int y)
{
   for (int i = 1; i<20 ; i+=1 )
    {
        Circle c(x,y,i);
        c.setColor(233);
        c.setFill(1);
        wait(0.05);
    }
    check=1;

}


class tank
{
  public:

    Rectangle t ;                             //entities of the tank
    Line l ;

  void checktank(int i, Circle c)
   {
    double distance;
    char hit;

    if(i%2==1)
     {
        distance = sqrt((c.getX()-tank2x)*(c.getX()-tank2x)+(c.getY()-tank2y)*(c.getY()-tank2y));       //calculating distance between tank and projectile
     }

     else
     {
        distance = sqrt((c.getX()-tank1x)*(c.getX()-tank1x)+(c.getY()-tank1y)*(c.getY()-tank1y));
     }

    if(distance==0)
       {
        hit='f';
        explosion(c.getX(),c.getY());
        pointcalc(hit,i);                                     // function to calculate tanks
       }
    else if(distance<20)
       {
        hit='p';
        explosion(c.getX(),c.getY());
        pointcalc(hit,i);
       }
    }


   void shot(double pow,double angle,int i,int wind)
    {
       //pow = (pow*4*sqrt(2))/100;                            // to optimise power
       //angle = (pi/180)*angle;                                 // to convert degree to radian measure
       // double vx = (pow*cos(angle))/10 , vy = -(pow*sin(angle))/10 , tf ;
      double vx = pow/15 + wind;
      double vy = -pow/8;

      int n=200;

      Circle c(l.getX(),l.getY(),5);
      c.setColor(255);
      c.setFill(1);
       if(i%2==1)
          {

           repeat(n)
            {
             c.move(vx,vy);           //simulate projectile motion
             vy +=gravity;
             checktank(i,c);



             if(check>0)
                break;
            }
           }
        else
        {
            repeat(n)
            {
             c.move(-vx,vy);
             vy +=gravity;
             checktank(i,c);


             if(check>0)
                break;

            }
        }
    }


    void rotation (double angle , int i)                           //move the shank
    {
       if(i%2==1)
          l.reset(100,580,100+shank*cos(angle),580-shank*sin(angle));
       else
          l.reset(700,580,700-shank*cos(angle),580-shank*sin(angle));
    }

    void pointcalc(char hit , int i)
    {
        if(i%2==1)
            {
             if(hit=='f')                        //full hit or partial hit
             point1+=50;
             if(hit=='p')
             point1+=30;
            }

        if(i%2==0)
            {
             if(hit=='f')
             point2+=50;
             if(hit=='p')
             point2+=30;
            }

    }


};



void setscreen(tank tank1, tank tank2)
{
    int chance=1;
    double power,angle;
    settextstyle( 10, HORIZ_DIR, 2);

    /*{
   DEFAULT_FONT,
   TRIPLEX_FONT,
   SMALL_FONT,
   SANS_SERIF_FONT,
   GOTHIC_FONT,
   SCRIPT_FONT,
   SIMPLEX_FONT,
   TRIPLEX_SCR_FONT,
   COMPLEX_FONT,
   EUROPEAN_FONT,
   BOLD_FONT
   }*/

    Text t1(80,10,"Power");
    Text t2(700,10,"Angle");
    Text t4(610,50,"0 deg");
    Text t5(760,50,"180 deg");
    Text t6(80,70,"Player 1");
    Text t7(720,70,"Player 2");



    Rectangle r1(80,30,100,20);        //power
    Rectangle r2(700,30,180,20);       //angle
    Rectangle r3(400,20,80,40);        //fire
    Rectangle r1o(80,30,100,20);       //outline of fire
    Rectangle r2o(700,30,180,20);      //outline of angle


    r1.setColor(BLUE);                 //color of power
    r1.setFill();

    r2.setColor(BLUE);                 //color of angle
    r2.setFill();

    r3.setColor(RED);                  //color of Fire
    r3.setFill();

    Text t3(400,20,"Fire");            //written here so that it overlaps the fill .

    int codx=0,cody=0,temp;
    temp=getClick();
    codx=temp/65536;
    cody=temp%65536;

   time_t now2 = time(0);
   char* dt = ctime(&now2);    // convert now to string form
   int wx=(int)dt;              //converting dt to integer
   int wind=(wx%5)-2;           //random wind




LABEL :check=0;
cout<<"Player 1 : "<< point1<<" points" <<endl;           //consoling out points
cout<<"Player 2 : "<<point2<<" points" <<endl;

        while(true)
        {
         if(point1>=100)
          {
           Text w1(400,300,"Tank 1 is the winner");
           wait(100);
          }

         if(point2>=100)
          {
           Text w2(400,300,"Tank 2 is the winner");
           wait(100);
          }

          temp = getClick();
          codx=temp/65536;
          cody=temp%65536;
          if(codx>30&&codx<130&&cody>20&&cody<40)
           {
            r1.reset((30+codx)/2,30,codx-30,20);              //adjust power
            power = codx-30;
           }


          if(codx>610&&codx<790&&cody>20&&cody<40)
           {

            r2.reset((610+codx)/2,30,codx-610,20);
            angle = (codx-610);
            if(chance%2==1)
               tank1.rotation((angle*pi)/180,chance);
            else
               tank2.rotation((angle*pi)/180,chance);
           }

          if(codx>360&&codx<440&&cody<40&&cody>0)
           {
             if(point2<100&&point1<100)
              {
                if(chance%2==1)
                  {tank1.shot(power,angle,chance,wind);            //calling SHOT
                  cout<<wind;}
                else
                  {tank2.shot(power,angle,chance,wind);
                  cout<<wind;}
              }

             chance+=1;
             goto LABEL;
            }
         }

}


int main()
{
   initCanvas("POCKET TANKS ",800,600);
   int temp = m_menu();

    if (temp==2)
    {
        temp=instructions();
        if(temp==1)
        {
            m_menu();
        }
    }

    if(temp==1)
    {


    Rectangle T[20];
    Rectangle R(400,550,800,100);
    R.setColor(GREEN);
    R.setFill();
    time_t now = time(0);

   // convert now to string form
   char* dt = ctime(&now);
   //converting dt to integer
   int tank1_height, tank2_height;
   int x=(int)dt;
   int terrain_choice=x%5;                   //Randomising terrain

   if(terrain_choice==0)
   {
       for(int i=0;i<20;i++)
    {
        yfinal[i]=yA[i];
        T[i].reset(i*40,500,40,yA[i]);
        T[i].setColor(GREEN);
        T[i].setFill();
    }


   }
   else
   if(terrain_choice==1)
   {
       for(int i=0;i<20;i++)
    {
        yfinal[i]=yB[i];
        T[i].reset(i*40,500,40,yB[i]);
        T[i].setColor(GREEN);
        T[i].setFill();
    }

   }
   else
   if(terrain_choice==2)
   {
       for(int i=0;i<20;i++)
    {
        yfinal[i]=yC[i];
        T[i].reset(i*40,500,40,yC[i]);
        T[i].setColor(GREEN);
        T[i].setFill();
    }

   }
   else
   if(terrain_choice==3)
   {
       for(int i=0;i<20;i++)
    {
        yfinal[i]=yD[i];
        T[i].reset(i*40,500,40,yD[i]);
        T[i].setColor(GREEN);
        T[i].setFill();
    }
   }
   else
   if(terrain_choice==4)
   {
       for(int i=0;i<20;i++)
    {
        yfinal[i]=yE[i];
        T[i].reset(i*40,500,40,yE[i]);
        T[i].setColor(GREEN);
        T[i].setFill();
    }

   }

     tank tank1,tank2;
        tank1.t.reset(90,(500-(yfinal[2]/2)-5),20,10);
        tank2.t.reset(690,(500-(yfinal[17]/2)-5),20,10);
        tank1.l.reset(tank1.t.getX(),tank1.t.getY(),tank1.t.getX()+shank/sqrt(2),tank1.t.getY()-shank/sqrt(2));               //aligning initial angle at 45
        tank2.l.reset(tank2.t.getX(),tank2.t.getY(),tank2.t.getX()-shank/sqrt(2),tank2.t.getY()-shank/sqrt(2));

        tank1.t.setColor(BROWN);                                                  //color of tank
        tank1.t.setFill();

        tank2.t.setColor(BROWN);
        tank2.t.setFill();

        tank1y=500-(yfinal[2]/2);
        tank2y=500-(yfinal[17]/2);

      setscreen(tank1,tank2);


    }


}
